// Package norm provides normalization routines for making arbitrary text
// compatible with Kubernetes's field requirements.
package norm

import "strings"

func dnsMapper(allowDot bool) func(rune) rune {
	return func(r rune) rune {
		switch {
		case r >= '0' && r <= '9':
			return r
		case r >= 'a' && r <= 'z':
			return r
		case r >= 'A' && r <= 'Z':
			return r | 0x20
		case allowDot && r == '.':
			return r
		default:
			return '-'
		}
	}
}

var (
	dnsSubdomainNameMapper = dnsMapper(true)
	dnsLabelNameMapper     = dnsMapper(false)
)

// AnyDNSSubdomainName normalizes a raw string so that it conforms to the
// structure of a DNS domain: it must be all lowercase; contain only
// alphanumeric characters, dashes, and dots; and the first and last characters
// must be alphameric.
func AnyDNSSubdomainName(raw string) string {
	mapped := strings.Map(dnsSubdomainNameMapper, raw)
	mapped = strings.Trim(mapped, ".-")
	if len(mapped) > 253 {
		mapped = mapped[:253]
	}
	return mapped
}

// AnyDNSLabelName normalizes a raw string so that it conforms to the structure
// of a DNS label: it must be all lowercase, contain only alphanumeric
// characters and dashes, and the first and last characters must be alphameric.
func AnyDNSLabelName(raw string) string {
	mapped := strings.Map(dnsLabelNameMapper, raw)
	mapped = strings.Trim(mapped, "-")
	if len(mapped) > 63 {
		mapped = mapped[:63]
	}
	return mapped
}

// AnyDNSLabelNameSuffixed calls AnyDNSLabelName ensuring that the entirety of
// the given suffix is retained if possible.
func AnyDNSLabelNameSuffixed(prefix, suffix string) string {
	remaining := 63 - len(suffix)
	if remaining <= 0 {
		return AnyDNSLabelName(suffix)
	}
	if remaining < len(prefix) {
		prefix = prefix[:remaining]
	}
	return AnyDNSLabelName(prefix + suffix)
}

// MetaName normalizes a Kubernetes metadata name field.
func MetaName(raw string) string {
	return AnyDNSLabelName(raw)
}

// MetaNameSuffixed normalizes a Kubernetes metadata name field ensuring that
// the entirety of the given suffix is retained if possible.
func MetaNameSuffixed(prefix, suffix string) string {
	return AnyDNSLabelNameSuffixed(prefix, suffix)
}

// MetaGenerateName normalizes a Kubernetes metadata generateName field. It is
// opinionated in that it also forces a dash before the five characters
// generated by the Kubernetes API.
func MetaGenerateName(raw string) string {
	mapped := strings.Map(dnsLabelNameMapper, raw)
	mapped = strings.Trim(mapped, "-")
	if len(mapped) > 57 {
		mapped = mapped[:57] + "-"
	} else if mapped[len(mapped)-1] != '-' {
		mapped += "-"
	}
	return mapped
}
